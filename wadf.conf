; Web Application Deployment Framework
; Global config file example

;;;; defined by system, static
;
; @hostname@ - hostname of current machine
; @cwd@      - current working directory
; @user@     - current system (e.g. UNIX) user e.g. "fred"
; @home@     - home directory of current system user
; @deploy_version@ - deployment tag
;
;;; defined by system, vary in context
;
; @vhost_number@ - generic reference to vhost number within a particular deployment instance
;				  (where relevant). is EMPTY (not "1") if only 1 exists.
; @db_number@ - generic reference to database number within a particular deployment instance
;			   (where relevant). Is EMPTY (not "1") if only 1 exists.
; @rand:X_Y@ - generate a random integer between X and Y inclusive
;
;;; comes from command line or as a primary input
;
; @appref@ - app reference
;			appref MUST BE 0-9a-z-_. or a subset thereof
;
;;; defined in default config
; @instance@ - instance name
;			  an app may be deployed multiple times on a machine - each deployment is an "instance"
;			  instances are unique to a machine
;			  e.g. on a machine different users might deploy same app for development
;			  e.g. instance name might be "myapp-user1"

; @deploy_domain@ - deployment domain
;
;;;
; Modifiers can be prepended to a macro and are as follows:
; underscore - appref with separator replaced by underscores
; hyphen - appref
; slash
; dot - appref with separator replaced by dots
; e.g. @underscore:appref@


[globals]
; Type of version control system. Only SVN is currently supported.
vc_type = svn

; module, revision and branch (trunk, named branch) are passed to version
; control plugin (the 'appref' is passed as module name)
vc_base = svn+ssh://svn@svn.example.com

; Type of webserver. httpd = ASF HTTPD
webserver_type = httpd

; Type of PHP installation:
;  mod_php               = PHP directives from the app's own php.ini are
;                          inserted into the site vhost
;  cgi:/path/to/php.ini  = The app's own php.ini file if it exists is copied to
;                          /path/to/php.ini
;  fpm:/path/to/fpm.conf = Use PHP-FPM. If set to the string "local" then it 
;                          will assume a local developer setup in 
;                          $HOME/.wadf/php-fpm.conf.d 
php_type = mod_php

; Where to find the app's own PHP config *within the app's directory*, relative
; to the root of the deploy_path directory
; EXCLUDE the ".template" extension
; See also the php_config_location_extra parameter
php_config_location = php.ini

; Local php.ini overrides. These will be added to the application's own
; php.ini config options. Typically you will want to set this in individual
; profiles (e.g. local, staging, live)
php_config_location_extra =

; how to restart the webserver
webserver_restart_cmd = 

; where to find the template vhost config within an app's directory, relative
; to the root of the directory
; EXCLUDE the ".template" extension
; non-default examples:
; configs/@webserver_type@.ini
; @appref@.@webserver_type@
vhost_config_template = vhost-@webserver_type@.conf

db_schema = schema@db_number@.sql

; by default, instance name is same as app name
; a user might override this in ~/.wadf/config by putting:
; instance = @appref@-@user@
; or similar
instance = @appref@

; optional and does not have to be used but useful to abstract deployment
; domain so that individual apps that override part of the domain don't have to
; re-encode the default logic for the domain ending
deploy_domain = @hostname@

; Filesystem path to check the app out into
; should perhaps be randomised on a staging server to check app has no hardcoded refs
deploy_path = @cwd@/@instance@

; How to deploy DNS for the hosts.
; none  = don't do anything
; hosts = modify a local 'hosts' file (see config option deploy_dns_hosts_file)
deploy_dns = hosts

; Which 'hosts' file to modify, if the "deploy_dns" option is set to "hosts"
deploy_dns_hosts_file = /etc/hosts

; What format to write the hosts file in, if deploy_dns is set to "hosts".
; 1 = lines look something like "127.0.0.1 localhost APPDOMAIN"
; 2 = lines look something like "127.0.0.1 APPDOMAIN"
deploy_dns_hosts_file_format = 1

; The IP address to assume the deployed app is running on, when modifying
; "hosts" files (see "deploy_dns" option).
deploy_dns_hosts_ip = 127.0.0.1

; The character which is considered to be a "separator"
appref_separator = -

; db name/user/pass will be processed by the DB module to conform with
; DB-specific conventions about string length, contents etc.
; these options become defaults for ALL dbX_yyyy options.
db_name = @underscore:instance@@db_number@
db_user = @underscore:instance@
db_pass = @underscore:instance@pass
db_type = mysql

; The value used as the user's remote host when access is created
db_user_host = %

; What actions to take when deploying databases. There are three possible
; complementary (not exclusive) options here:
;  - "create" - Create a new database on the database server
;  - "grant"  - Grant permissions to db_user using db_pass
;  - "schema" - Clear out the current database and deploy a fresh schema, from
;               the file specified by the db_schema option
; Multiple options can be specified, separated by commas. Order does not matter.
; This option can be overridden on per-database basis e.g. db2_deploy
db_deploy = create, grant, schema

; What user to deploy the database as
; This option can be overridden on per-database basis e.g. db2_deploy_user
db_deploy_user = root

; What password to use when deploying the database
; This option can be overridden on per-database basis e.g. db2_deploy_pass
; Use "%%" to prompt at runtime
db_deploy_pass = %%

; Where to find the application-specific config file. This is normally a file
; which contains specific configuration directives for this particular
; application, often split by profile. This is particularly significant for
; profiles intended for deployment to a live server, where they may have
; "real" (vs. auto-generated-by-WADF) hostnames etc.
local_config = @deploy_path@/wadf.conf

; Where to store the vhost config file
; Currently, this MUST be set to "vhost_config_path = @home@/.wadf/vhosts"
; if you want to use the WADF HTTP micro server
vhost_config_path = @home@/.wadf/vhosts

; Prepend or append text inside the virtual host configuration
; Currently if there is more than one vhost these will be prepended/appended to
; ALL the vhosts.
; You can use "\n" to insert a new line and "\t" to insert a tab e.g. 
; vhost_config_append = "\t<Directory />\n\t\tOptions +Indexes\n\t</Directory"
; vhost_config_append = "<Proxy \"unix:/path/to/home/.wadf/run/php-fpm/@instance@.sock|fcgi://php-fpm\">\n\tProxySet disablereuse=off\n</Proxy>\n<FilesMatch \.php$>\n<If \"-f '%{SCRIPT_FILENAME}'\">\n\tSetHandler proxy:fcgi://php-fpm\n</If>\n</FilesMatch>"
vhost_config_append = 
vhost_config_prepend = 

; Default vhost name (generic)
vhost_name = @instance@@vhost_number@.@deploy_domain@

; Default interface
vhost_interface = *

; Script to use to get an app "up and running" after initial deployment (i.e.
; script which populates the database with initial values etc.)
kickstart_script = @deploy_path@/setup.php

; Script which is run after ALL file-base deployment is complete (including 
; running kickstart_script) but BEFORE webserver_restart_cmd
; Useful on live servers for running something like a script that runs as a
; privileged process to copy processed configurations to the right place
post_deploy_script = 

; Which file contains the scheduled job information
crontab = @deploy_path@/crontab

; Files to cleanup after deployment. Files are only cleaned up if they are 
; GENERATED files; that is, if the file also exists with a ".template"
; extension, unless you prefix the file with "+", in which case it is removed
; anyway.
; Separate multiple files with spaces.
; Relative file paths are relative to deploy_path
post_deploy_cleanup_files = @vhost_config_template@ @db_schema@ @crontab@

; Whether files generated from templates are writeable by default. If this is
; set to false then WADF will attempt to make generated files read-only. This
; can be useful to stop you losing work by accidentally working on a generated
; file (which will be overwritten on the next wadf-reprocess) rather than the
; source file
generated_files_writeable = false

; Comma-separated list of paths to exclude from templating, relative to
; @deploy_path@ e.g. "svn_checkouts/", "foo/bar/z.template"
template_exclude_paths = 

; which profile to use for this machine
profile = local

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; dependency stuff

; REQUIRED: where to put local pear module installs.
; If this is EMPTY, the system (or user-account-installed, if that is in
; $PATH) will be used.
dep_pear_deploy_path = @deploy_path@/pear_local

; Where to put the config file for local pear module installs
; REQUIRED if dep_pear_deploy_path is not empty
dep_pear_config_file = @dep_pear_deploy_path@/.pearrc

; REQUIRED
; The PEAR base channel which is going to provide the base "role" (see also
; dep_pear_base_roles option).
; Can include username and password e.g. user:pass@channelname
dep_pear_base_channel = pear.example.com

; Whether to log out of the base channel after deployment (this clears cached
; PEAR channel passwords from the deployment)
dep_pear_base_channel_logout_after_deploy = no

; REQUIRED
; The package (in "channel/name" format) which provides the base "application"
; role. Plus any other packages providing custom "base roles" that you wish
; to have installed by default. Separate multiple package names with spaces.
dep_pear_base_roles = mychan/Role_Application

; PEAR options which should be translated into macros for substitution into
; templates. Separate multiple options with spaces.
dep_pear_opts_as_macros = php_dir php_bin

; Preferred PEAR stability for importing dependencies: alpha, beta or stable
; Be aware that setting this to anything other than "alpha" will cause issues
; if your dependency chain is not all within your preferred stability state.
dep_pear_preferred_stability = beta

; Whether to install documentation for PEAR packages or not. This only has an
; effect if dep_pear_deploy_path is NOT EMPTY.
dep_pear_install_docs = no

; Name of an (optional) file containing information about *specific* versions
; of dependencies to install. (Typically this is used in application tags)
dep_tags_file = @deploy_path@/dependency-tags

; Whether to clear the PEAR cache after deployment
; This can be useful during development or to reduce the footprint of the final
; installation, but means quite a bit more network traffic and slower
; re-processing
dep_pear_clear_cache = no

; Force a specific version of the PEAR package to be installed, when creating a
; standalone PEAR install
;dep_pear_force_pear_version = 1.10.11

; Whether or not to enable workaround for PEAR bugs. Separate multiple options
; with commas.
; Options are:
; bug13425 = Try to spot the situation where installing dependencies fails
;            because two different versions of the same package are requested
;            in the dependency tree. In this case WADF will force-install the
;            oldest version of the dependency in question
; bug13427 = PEAR sometimes ignores the <max> dependency and installs a package
;            which is too new, and/or a too-new package gets installed as a
;            result of the workaround to bug 13425. In this case WADF will
;            crudely try to force a downgrade of the affected package to the
;            version listed in <max> (which may not work if the <max> version
;            doesn't actually exist as a release)
dep_pear_bug_workarounds = bug13425, bug13427

; Directories to look in to find local copies of PEAR packages (e.g. checkouts
; from version control). Relative to @deploy_path@ . Separate multiple 
; directories with commas.
dep_pear_local_package_dirs = 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PROFILES

[local]
profile_description = Local machine
db_host = localhost
deploy_domain = @hostname@
; becomes default for ALL vhostX_name options
vhost_name = @hyphen:instance@@vhost_number@.@deploy_domain@
php_config_location_extra = @home@/.wadf/php.ini
webserver_restart_cmd = wadf-httpd -i @instance@ reloadstart

[dev]
profile_description = Development server
db_host = mysql.dev.example.com
deploy_domain = dev.example.com
vhost_name = @hyphen:instance@@vhost_number@.@deploy_domain@

[staging]
profile_description = Client staging server
db_host = mysql.staging.example.com
deploy_dns = none
deploy_domain = staging.example.com
vhost_name = @hyphen:instance@@vhost_number@.@deploy_domain@
deploy_path = /var/www/staging/@instance@
dep_pear_preferred_stability = beta

[live]
profile_description = Live server
db_host = @instance@.db.example.com
deploy_dns = none
dep_pear_preferred_stability = stable

; Assume that on a live server:
; - the database is created by an administrator
; - the database users/passwords/permissions are created by an administrator
; - the database passwords are secure and non-predictable
; so we only want to deploy the schema, and do it as a non-root user
db_deploy = schema
db_pass = %%
db1_deploy_user = @db1_user@
db1_deploy_pass = @db1_pass@
db2_deploy_user = @db2_user@
db2_deploy_pass = @db2_pass@
db3_deploy_user = @db3_user@
db3_deploy_pass = @db3_pass@
; etc.
